sudo apt-get update
sudo apt-get -y upgrade

sudo apt-get install mysql-server
sudo apt-get update

sudo mysql -uroot -p
//type password "root"

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
FLUSH PRIVILEGES;
quit

sudo mysql_secure_installation
//enter root password
//press n
//Change the password for root ? n
//Remove anonymous users? y
//Disallow root login remotely? y
//Remove test database and access to it? y
//Reload privilege tables now? y
//should prompt you with "All done!"

mysql -uroot -p
//type password "root"

############### EITHER THIS #############
//now Export data from your MySQL workbench
//Server > Data Export > Select schema > "Export to Self-Contained File" > "Create Dump in a Single Transaction" > "Include Create Schema"
// click on "Start Export"
//open the .sql file with vscode and paste the page content in mysql shell
//test if it worked
show databases;
use <<YOUR_SCHEMA>>;
show tables;
SELECT * FROM <<TABLE_NAME>>;
//type "quit" to exit

######### OR ###########
//in the shell, create a new empty schema instead of exporting yours!
create schema <<SCHEMA_NAME>>;

//type "quit" to exit the shell

sudo apt-get install apache2
//make sure to press Y to accept
//go to the site and see if it works (public ip)

//paste these imports in the main class in your application
import org.apache.catalina.connector.Connector;
import org.apache.coyote.ajp.AbstractAjpProtocol;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.context.annotation.Bean;

//then paste this method under the main scope
@Bean
    public TomcatServletWebServerFactory servletContainer() {
        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();
        Connector ajpConnector = new Connector("AJP/1.3");
        ajpConnector.setPort(9090);
        ajpConnector.setSecure(false);
        ajpConnector.setAllowTrace(false);
        ajpConnector.setScheme("http");
	((AbstractAjpProtocol<?>)ajpConnector.getProtocolHandler()).setSecretRequired(false);
        tomcat.addAdditionalTomcatConnectors(ajpConnector);
        return tomcat;
    }

//open terminal in intelliJ and paste this command
mvn clean install


####### EITHER THIS ########
//if you use SSH from your PC, then cd to your /target/ directory inside your project and paste this command
scp -i ~/Desktop/<<YOUR_PEM_KEY>>.pem <<YOUR_PROJECT_NAME>>-0.0.1-SNAPSHOT.war ubuntu@34.228.244.112:~/
####### OF THIS ############
//or use WINSCP to access your server
//after your .war file is on the server, type "ls" to make sure it's there

sudo mkdir /var/springApp
sudo mv ~/<<YOUR_PROJECT_NAME>>-0.0.1-SNAPSHOT.war /var/springApp/

//set up proxy
sudo a2enmod proxy
sudo a2enmod proxy_ajp

cd /etc/apache2/sites-available
sudo nano 000-default.conf
//paste these at the bottom, right before the closing tag </VirtualHost>
ProxyPass / ajp://localhost:9090/
ProxyPassReverse / ajp://localhost:9090/
//ctrl + o to save
//press Enter
//ctrl + x to exit

//restart apache server
sudo service apache2 restart

//install JDK
sudo apt install openjdk-17-jdk


//run your project
cd /var/springApp/
java -jar <<YOUR_PROJECT_NAME>>-0.0.1-SNAPSHOT.war


cd /etc/systemd/system
sudo touch <<YOUR_PROJECT_NAME>>.service
sudo nano <<YOUR_PROJECT_NAME>>.service
//paste this inside the file
[Unit]
Description=<<YOUR_PROJECT_NAME>> application using Spring Boot
After=syslog.target
[Service]
User=ubuntu
ExecStart=/usr/bin/java -jar /var/springApp/<<YOUR_PROJECT_NAME>>-0.0.1-SNAPSHOT.war
SuccessExitStatus=143
[Install]
WantedBy=multi-user.target

sudo systemctl daemon-reload
sudo systemctl enable <<YOUR_PROJECT_NAME>>.service
sudo systemctl start <<YOUR_PROJECT_NAME>>

//THAT'S IT, YOU'RE DONE!!!!

//if you want to stop, restart, or check status of server

sudo systemctl stop <<YOUR_PROJECT_NAME>>
sudo systemctl restart <<YOUR_PROJECT_NAME>>
systemctl status <<YOUR_PROJECT_NAME>>
